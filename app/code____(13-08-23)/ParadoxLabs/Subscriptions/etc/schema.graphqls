type Query {
    subscriptions(entity_id: Int): [Subscription] @resolver(class: "ParadoxLabs\\Subscriptions\\Model\\Api\\GraphQL\\GetSubscription") @doc(description: "Get the current customer's subscriptions, if any. Takes optional entity_id for a specific subscription.")
    subscriptionPayments(subscription_id: Int!): [SubscriptionPaymentAccount] @resolver(class: "ParadoxLabs\\Subscriptions\\Model\\Api\\GraphQL\\GetPaymentAccounts") @doc(description: "Get the current customer's payment accounts, if any, available for a specific subscription.")
}

type Mutation {
    changeSubscriptionStatus(entity_id: Int!, status: String!): Subscription @resolver(class: "ParadoxLabs\\Subscriptions\\Model\\Api\\GraphQL\\ChangeStatus") @doc(description: "Change the given subscription's status")
    updateSubscription(input: SubscriptionUpdateInput!): Subscription @resolver(class: "ParadoxLabs\\Subscriptions\\Model\\Api\\GraphQL\\UpdateSubscription") @doc(description: "Update a subscription")
}

type Subscription @doc(description: "Subscription details") {
    entity_id: Int @doc(description: "Subscription ID")
    increment_id: String @doc(description: "Subscription Increment ID (user-visible)")
    quote_id: Int @doc(description: "Subscription Quote ID")
    description: String @doc(description: "Description")
    customer_id: Int @doc(description: "Customer ID")
    created_at: String @doc(description: "Created-at date")
    updated_at: String @doc(description: "Updated-at date")
    store_id: Int @doc(description: "Store ID")
    next_run: String @doc(description: "Next scheduled run date")
    last_run: String @doc(description: "Last run date")
    last_notified: String @doc(description: "Last upcoming-billing notified date")
    subtotal: Float @doc(description: "Subtotal amount")
    length: Int @doc(description: "Length (total number of installments)")
    run_count: Int @doc(description: "Run count (number of installments completed)")
    status: String @doc(description: "Status")
    frequency_count: Int @doc(description: "Frequency count (how often it runs)")
    frequency_unit: String @doc(description: "Frequency unit (how often it runs)")
    additional: [TokenBaseKeyValue] @doc(description: "Subscription metadata")
    quote: SubscriptionQuote @doc(description: "Subscription contents/fulfillment details")
    logs: [SubscriptionLog] @doc(description: "Subscription history logs")
}

type SubscriptionQuote @doc(description: "Subscription contents/fulfillment details") {
    entity_id: Int
    customer_email: String
    subtotal: Float
    grand_total: Float
    quote_currency_code: String
    items: [SubscriptionQuoteItem]
    billing_address: SubscriptionQuoteBillingAddress
    shipping_address: SubscriptionQuoteShippingAddress
    payment: SubscriptionQuotePayment
}

type SubscriptionQuoteItem @doc(description: "Subscription item") {
    product: ProductInterface
    item_id: Int
    sku: String
    name: String
    description: String
    product_id: Int
    parent_item_id: Int
    is_virtual: Boolean
    weight: Float
    qty: Float
    price: Float
    custom_price: Float
    discount_amount: Float
    tax_percent: Float
    tax_amount: Float
    row_total: Float
    row_total_with_discount: Float
    product_type: String
    original_custom_price: Float
    price_incl_tax: Float
    row_total_incl_tax: Float
    discount_tax_compensation_amount: Float
    free_shipping: Boolean
    weee_tax_applied_amount: Float
    weee_tax_applied_row_amount: Float
    weee_tax_disposition: Float
    weee_tax_row_disposition: Float
}

type SubscriptionQuoteBillingAddress @doc(description: "Subscription billing address") {
    address_id: Int
    customer_address_id: Int
    region: String
    region_id: Int
    country_id: String
    street: [String]
    company: String
    telephone: String
    fax: String
    postcode: String
    city: String
    firstname: String
    lastname: String
    middlename: String
    prefix: String
    suffix: String
    vat_id: String
}

type SubscriptionQuoteShippingAddress @doc(description: "Subscription shipping address") {
    address_id: Int
    customer_address_id: Int
    same_as_billing: Boolean
    region: String
    region_id: Int
    country_id: String
    street: [String]
    company: String
    telephone: String
    fax: String
    postcode: String
    city: String
    firstname: String
    lastname: String
    middlename: String
    prefix: String
    suffix: String
    vat_id: String
    shipping_method: String
    shipping_description: String
    weight: Float
    subtotal: Float
    subtotal_with_discount: Float
    tax_amount: Float
    shipping_amount: Float
    shipping_tax_amount: Float
    discount_amount: Float
    grand_total: Float
    customer_notes: String
    discount_description: String
    shipping_discount_amount: Float
    subtotal_incl_tax: Float
    discount_tax_compensation_amount: Float
    shipping_discount_tax_compensation_amount: Float
    shipping_incl_tax: Float
    free_shipping: Boolean
    customer_balance_amount: Float
}

type SubscriptionQuotePayment @doc(description: "Subscription payment info") {
    entity_id: Int
    method: String
    cc_type: String
    cc_last_4: String
    cc_owner: String
    cc_exp_month: String
    cc_exp_year: String
    cc_ss_owner: String
    cc_ss_start_month: String
    cc_ss_start_year: String
    po_number: String
    additional_data: [TokenBaseKeyValue]
    cc_ss_issue: String
    additional_information: [TokenBaseKeyValue]
    paypal_payer_id: String
    paypal_payer_status: String
    paypal_correlation_id: String
    tokenbase_id: Int
}

type SubscriptionLog @doc(description: "Subscription history log") {
    log_id: Int
    created_at: String
    status: String
    order_id: Int
    order_increment_id: String
    agent_id: Int
    description: String
    additional_information: [TokenBaseKeyValue]
}

type SubscriptionPaymentAccount @doc(description: "Available subscription payment option") {
    public_hash: String
    label: String
    method: String
    cc_type: String
    cc_exp: String
    cc_last4: String
}

input SubscriptionUpdateInput @doc(description: "Subscription update info") {
    entity_id: Int! @doc(description: "Subscription ID to update (required)")
    billing_address_id: Int @doc(description: "OFFLINE PAYMENT METHODS ONLY. Customer address ID to change the subscription billing address to. Skip to leave unchanged. Will override any billing_address given; provide one or the other, not both.")
    billing_address: CustomerAddressInput @doc(description: "OFFLINE PAYMENT METHODS ONLY. Customer address to change the subscription billing address to. Skip to leave unchanged.")
    payment_account: String @doc(description: "Identifier hash of the TokenBase or Vault record to use for payment. Skip to leave unchanged.")
    shipping_address_id: Int @doc(description: "Customer address ID to change the subscription shipping address to. Skip to leave unchanged. Will override any shipping_address given; provide one or the other, not both.")
    shipping_address: CustomerAddressInput @doc(description: "Customer address to change the subscription shipping address to. Skip to leave unchanged.")
}
